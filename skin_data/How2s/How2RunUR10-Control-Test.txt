#Terminal 1 ROSCORE
rosclean purge -y
roscore

#Terminal 2 UR10 and RViz (preferably run this in a different workstation)
roslaunch tum_ics_ur10_description bringUR10.launch

#############SIMULATION_MODE################################
#Verify the cnfiguration file. Should be in sim mode
#Terminal 3 
cd /home/rcah/ros/workspaces/testUR10_ws/
rossource
rosed tum_ics_ur10_controller_tutorial configUR10_FD.ini
#This will open the default editor. Please verify the variable ROBOT_TYPE. It should be deined as:
ROBOT_TYPE=sim;

#Run controller test in simulation mode:
roslaunch tum_ics_ur10_controller_tutorial testSimpleEffortCtrl.launch

#Don't worry if you get this message "sched_setscheduler: Operation not permitted mlockall failed: Cannot allocate memory". It is basically a super-user rights, but the robot is still operational.

#In order to change the parameters of the controller, e.g. gains or joint position goal edit the following yaml file.
rosed tum_ics_ur10_controller_tutorial simpleEffortCtrl.yaml

#You can change the goal by modifing the line:
goal: [0, -90, 0, -90, 0, 0, 4.0] 
#or
goal: [45, -45, 45, -45, 45, 45, 5.0]

#The first 6 values of this parameter are the joint desired positions, and the last value is the total time to reach the goal. 

#Please verify that you controller works perfectly in the simulation mode before trying the real-robot mode.

#IMPORTANT!!: DO NOT MODIFY ANY VARIABLES IN THE YAML FILE "pidInt.yaml". THIS IS FOR INTERNAL USE ONLY.  

 
#############REAL-ROBOT_MODE################################
##IMPORTANT!!!: from this moment on, you should keep the robot always on sight and your hand over the emergency button (red button in the teach-pendant). 

#NOTE: Please verify that the network is connected to the static connection RobotNet
#Verify the connection with the robot
ping 192.168.1.10

#Verify the cnfiguration file. Should be in real mode
#Terminal 3 
cd /home/rcah/ros/workspaces/testUR10_ws/
rossource
rosed tum_ics_ur10_controller_tutorial configUR10_FD.ini
#This will open the default editor. Please verify the variable ROBOT_TYPE. It should be deined as:
ROBOT_TYPE=real;

#In Termina 4, Launch  the robot script manager. (Where is your hand?)
roslaunch tum_ics_ur_robot_manager robot_script_manager_ur10.launch

#You should get the following message
ScriptLoader(): trying to connect to server
ScriptLoader(): Client connected on address 192.168.1.3:51687
ScriptLoader(): Client finished. Succeeded in sending the script code.
ScriptManager::waitForSocketConnection: listening on port: 50001
ScriptManager::buildSocketConnection: Got a TCP connection on port: 50001
#if not see step (connection)

#You should see in the log tab (teach-pendant) a sequence of messages, see Fig.

#Now you are ready to run the real robot
#Where is your hand?
#and your eyes?


#In terminal 3, run again the control test
roslaunch tum_ics_ur10_controller_tutorial testSimpleEffortCtrl.launch

#When the robot is not moving anymore, stop the controller node
ctrl+c

#Stop the script manager. Go to Terminal 4 and type
q 
#You should see a message "Clean exit" in both the teach-pendant log and the Terminal 4.
# If you don't see the "Clean exit" in the teach-pendant, follow the next steps: 
1) Push the emergency button (red button). This will terminate any script running in the background
2) Disable the emergengy button (Pull the red button)
3) Move the robot back home 
4) Shutdown the robot. 
5) Re-start robot. 


#To control the gripper --- NOTE: you need the robot script manager running!
#Run the gripper control server. This server will enable two server calls (set and get gripper state)
roslaunch tum_ics_ur10_controller_tutorial lacqueyGripperServerUR10.launch

#Server calls to control the gripper
rosservice call /getGripperState

rosservice call /setGripperState "newState: 'open'"
rosservice call /setGripperState "newState: 'close'"
rosservice call /setGripperState "newState: 'free'"


#When you are finish DO NOT FORGET TO SHUTDOWN THE WORKSTATIONS and THE CALEFACTION!!!















