#NOTE TO ADVISORS: 
#	Please prepare the patch correctly before handle it to the students. If you don't know what this means ASK!
#NODE 1 Connect the skin to the PC
#a) TSU
#b) FTDI
#For case a)
roslaunch tum_ics_skin_driver_events skin_driver_tsu.launch

#For case b)
roslaunch tum_ics_skin_driver_events skin_driver_ftdi.launch FTDI_SERIAL:=FTYZ2YG4
#NOTE: If you don't have the serial number, then run the file without the serial number it will fail, but in the screen you will find the correct information of the FTDI, e.g. 
#FTDI device info:
#node[0]:
#      opened              = 0
#      high speed device   = 1
#      type                = 232H
#      locId               = 264
#      serialNumber        = FTYZ2YG4 << This is the correct serial number!!!
#      description         = SkinCellAdapter
#      ftHandle            = 0x0

# Robot Visualization
roslaunch tum_ics_ur10_description bringUR10.launch


#NODE 2 You need to create a skin config file, which basically containts the structural information of the patch. 
#In order to create this config file run:
roslaunch tum_ics_skin_tutorials full_config.launch
#This will open a window divided in 3 different steps (GUI Blocks)
#GUI Block Step 1: 
#	If you don't need a namespace use "/"
#	2 poses is ok as default
#	Put the skin in the first pose, and press "Capture"
#	Do this process as many times as indicated in "Desired Number of Poses"
#GUI Block Step 2:
#	Please verify that the skin patch shown in the display is similar to the real skin patch 
#	The GUI offers different configuration options, but for this simple case you can directly go to step 3.
#	Select the path and the name for the skin config file. This file will be needed to use the skin in your application (see NODE 3). For example, /ros/workspace/myworkspace/src/tum_ics_skin_tutorials/launch/configs/patch2Cells.xml
#GUI Block Step 3:
#	Select the base frame of the patch, i.e. the robot link where the patch is attached to (e.g. ee_link), and press the button "Define External TF".
#	If not already running, launch the bringup launch file of the robot and visualize it in rviz (roslaunch tum_ics_ur10_description bringUR10.launch)
# 	In rviz add the "InteractiveMarkers" plugin and select the "Update Topic". The interactive marker is shown in rviz and 
#	 you need to move the vizualized patch to the correct pose, using the arrows and rings of the interactive marker. Also, activate the Marker Array plugin to visualize the skin patch.
#	When the patch has its correct pose, e.g. the patch in rviz is located and orientated as is in the real robot (use the acceleration signals shown in rviz), then press
#	 the button "Confirm External TF" of the gui.
#	Press the "Save" button in "Step3: Extrinsics" group box of the gui. Select a proper name and path for the config file 
#	 (fileNamePath). This button will create a configuration file where the intrinsic and extrinsic parameters of the patch will be stored. 
#	 This config file will be used to obtain and visualize data from the skin patch.	 
#Close the main window

#NODE 3
# This node will show the skin patch in rviz, and if the config file <fileNamePath> is correct, the patch should be located in the right pose.
# The proximity and force signals are also displayed in rviz. 
roslaunch tum_ics_skin_tutorials load_and_view_patch_robot.launch CONFIG_PATH:=<fileNamePath>

#NODE 4
#You can inmediatly check whether the node is working, because will create a publisher with a topic named as the patch name. This topic contains all the information of all the cells in the patch, simply run:
rostopic list
#Check the topic name, it should be something like: /patchX
rostopic echo /patchX 

#Now to integrate the patch into your application, take a look on the file: tum_ics_skin_tutorials/src/Applications/main_load_and_view_patch_robot_tut.cpp
#There you will find an example on how to use the skinpatch API



