function symModel_UR10()
% Date: 12/24/2019
% Author: Maximilian Bader
% Description:
%   Script function that creates a model of the robot as an own MATLAB
%   function (model includes kinematics & dynamics).
%   Script function is based on the Universal Robot UR10. The DH table is
%   copied from the manufacturer's documentation.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
%close all;
clc;

% Define symbolic variables
syms q1 q2 q3 q4 q5 q6 pq1 pq2 pq3 pq4 pq5 pq6 ppq1 ppq2 ppq3 ppq1 ppq2 ...
     ppq3 ppq4 ppq5 ppq6 L1 L2 L3 L4 L5 L7 L8 L9 L10 L11 L12 L13 L14 L15 ...
     L16 m1 m2 m3 m4 m5 m6 g gx gy gz k1 k2 k3 k4 k5 k6 beta1 beta2 beta3...
     beta4 beta5 beta6 I111 I112 I113 I122 I123 I133 I211 I212 I213 I222 ...
     I223 I233 I311 I312 I313 I322 I323 I333 I411 I412 I413 I422 I423 I433 ...
     I511 I512 I513 I522 I523 I533 I611 I612 I613 I622 I623 I633 pq1r pq2r ...
     pq3r pq4r pq5r pq6r ppq1r ppq2r ppq3r ppq4r ppq5r ppq6r t_final t_init ...
     p_init p_final pp_init pp_final ppp_init ppp_final real;
 
Q = [q1;q2;q3;q4;q5;q6];
pQr = [pq1r;pq2r;pq3r;pq4r;pq5r;pq6r];
pQ = [pq1;pq2;pq3;pq4;pq5;pq6];
ppQr = [ppq1r;ppq2r;ppq3r;ppq4r;ppq5r;ppq6r];
ppQ = [ppq1;ppq2;ppq3;ppq4;ppq5;ppq6];

%% Robot Kinematics
% D-H table from geometric inspection
Dh = [q1       L1   0    pi/2;     % coordinate frame 1
      q2-pi/2  0    L2  0;         % coordinate frame 2
      q3       0    L3  0;         % coordinate frame 3
      q4-pi/2  L4   0   pi/2;      % coordinate frame 4    
      q5       L5   0   -pi/2;     % coordinate frame 5
      q6       L16  0   0;         % coordinate frame 6
      q1       L15  0   0;         % center of mass 1
      q2-pi/2  L7   L8  0;         % center of mass 2
      q3       L9   L10 0;         % center of mass 3
      q4-pi/2  L12  0   0;         % center of mass 4
      q5       L13  0   0;         % center of mass 5    
      q6       L14  0   0;];       % center of mass 6

sDh=size(Dh);

% compute relative transformations
for i=1:sDh(1)
    Rz= [cos(Dh(i,1)) -sin(Dh(i,1)) 0   0   ;
        sin(Dh(i,1))  cos(Dh(i,1))  0   0   ;
        0             0             1   0   ;
        0             0             0   1   ];
    
    Tz= [1            0       0   0   ;
        0             1       0   0   ;
        0             0       1   Dh(i,2);
        0             0       0   1   ];
    
    Tx= [1            0       0   Dh(i,3);
        0             1       0   0   ;
        0             0       1   0   ;
        0             0       0   1   ];
    
    Rx= [1     0             0        0   ;
        0 cos(Dh(i,4)) -sin(Dh(i,4))  0   ;
        0 sin(Dh(i,4))  cos(Dh(i,4))  0   ;
        0      0             0        1   ];
    
    % compute relative homogeneous transformation for each frame
    relHt{i}=simplify(Rz*Tz*Tx*Rx);
end
  
% Homogeneous transformations
T_i_0{1} = relHt{1};
T_i_0{2} = simplify(T_i_0{1}*relHt{2});
T_i_0{3} = simplify(T_i_0{2}*relHt{3});
T_i_0{4} = simplify(T_i_0{3}*relHt{4});
T_i_0{5} = simplify(T_i_0{4}*relHt{5});
T_i_0{6} = simplify(T_i_0{5}*relHt{6});
T_i_0{7} = relHt{7};
T_i_0{8} = simplify(T_i_0{1}*relHt{8});
T_i_0{9} = simplify(T_i_0{2}*relHt{9});
T_i_0{10} = simplify(T_i_0{3}*relHt{10});
T_i_0{11} = simplify(T_i_0{4}*relHt{11});
T_i_0{12} = simplify(T_i_0{5}*relHt{12});
  
%% Differential kinematics
% Jacobian matrix for end-effector
% Explanation: t_6_0 = T_i_0{6}(1:3,4), z_0 = [0;0;1], z_1 =
%              T_i_0{1}(1:3,3), ...
J_ef_0 = sym(zeros(6,6));
J_ef_0(1:3,1) = simplify(cross([0;0;1],T_i_0{6}(1:3,4)));
J_ef_0(4:6,1) = [0;0;1];
J_ef_0(1:3,2) = simplify(cross(T_i_0{1}(1:3,3),(T_i_0{6}(1:3,4)-T_i_0{1}(1:3,4))));
J_ef_0(4:6,2) = T_i_0{1}(1:3,3);
J_ef_0(1:3,3) = simplify(cross(T_i_0{2}(1:3,3),(T_i_0{6}(1:3,4)-T_i_0{2}(1:3,4))));
J_ef_0(4:6,3) = T_i_0{2}(1:3,3);
J_ef_0(1:3,4) = simplify(cross(T_i_0{3}(1:3,3),(T_i_0{6}(1:3,4)-T_i_0{3}(1:3,4))));
J_ef_0(4:6,4) = T_i_0{3}(1:3,3);
J_ef_0(1:3,5) = simplify(cross(T_i_0{4}(1:3,3),(T_i_0{6}(1:3,4)-T_i_0{4}(1:3,4))));
J_ef_0(4:6,5) = T_i_0{4}(1:3,3);
J_ef_0(1:3,6) = simplify(cross(T_i_0{5}(1:3,3),(T_i_0{6}(1:3,4)-T_i_0{5}(1:3,4))));
J_ef_0(4:6,6) = T_i_0{5}(1:3,3);

% derivative of jacobian
pJ_ef_0 = simplify(diff(J_ef_0,q1)*pq1 + diff(J_ef_0,q2)*pq2 + diff(J_ef_0,q3)*pq3 ...
                    + diff(J_ef_0,q4)*pq4 + diff(J_ef_0,q5)*pq5 + diff(J_ef_0,q6)*pq6);
                
% forward & differential kinematics of robot
phi_6_0=simplify(atan2(T_i_0{3}(2,1),T_i_0{3}(1,1))); % yaw around x-axis
theta_6_0=simplify(atan2(-T_i_0{3}(3,1),sqrt(1-T_i_0{3}(3,1)^2))); % pitch around y-axis
psi_6_0=simplify(atan2(T_i_0{3}(3,2),T_i_0{3}(3,3))); % roll arount z-axis
X_ef_0 = [T_i_0{6}(4,1);T_i_0{6}(4,2);T_i_0{6}(4,3);psi_6_0;theta_6_0;phi_6_0];
pX_ef_0 = simplify(J_ef_0*[pq1;pq2;pq3;pq4;pq5;pq6]);
ppX_ef_0 = simplify(J_ef_0*[ppq1;ppq2;ppq3;ppq4;ppq5;ppq6]+pJ_ef_0*[pq1;pq2;pq3;pq4;pq5;pq6]);

% jacobian of center of mass 1
J_cmi_0{1} = sym(zeros(6,6));
J_cmi_0{1}(1:3,1) = simplify(cross([0;0;1],T_i_0{7}(1:3,4)));
J_cmi_0{1}(4:6,1) = [0;0;1];

% jacobian of center of mass 2
J_cmi_0{2} = sym(zeros(6,6));
J_cmi_0{2}(1:3,1) = simplify(cross([0;0;1],T_i_0{8}(1:3,4)));
J_cmi_0{2}(4:6,1) = [0;0;1];
J_cmi_0{2}(1:3,2) = simplify(cross(T_i_0{1}(1:3,3),(T_i_0{8}(1:3,4)-T_i_0{1}(1:3,4))));
J_cmi_0{2}(4:6,2) = T_i_0{1}(1:3,3);

% jacobian of center of mass 3
J_cmi_0{3} = sym(zeros(6,6));
J_cmi_0{3}(1:3,1) = simplify(cross([0;0;1],T_i_0{9}(1:3,4)));
J_cmi_0{3}(4:6,1) = [0;0;1];
J_cmi_0{3}(1:3,2) = simplify(cross(T_i_0{1}(1:3,3),(T_i_0{9}(1:3,4)-T_i_0{1}(1:3,4))));
J_cmi_0{3}(4:6,2) = T_i_0{1}(1:3,3);
J_cmi_0{3}(1:3,3) = simplify(cross(T_i_0{2}(1:3,3),(T_i_0{9}(1:3,4)-T_i_0{2}(1:3,4))));
J_cmi_0{3}(4:6,3) = T_i_0{2}(1:3,3);

% jacobian of center of mass 4
J_cmi_0{4} = sym(zeros(6,6));
J_cmi_0{4}(1:3,1) = simplify(cross([0;0;1],T_i_0{10}(1:3,4)));
J_cmi_0{4}(4:6,1) = [0;0;1];
J_cmi_0{4}(1:3,2) = simplify(cross(T_i_0{1}(1:3,3),(T_i_0{10}(1:3,4)-T_i_0{1}(1:3,4))));
J_cmi_0{4}(4:6,2) = T_i_0{1}(1:3,3);
J_cmi_0{4}(1:3,3) = simplify(cross(T_i_0{2}(1:3,3),(T_i_0{10}(1:3,4)-T_i_0{2}(1:3,4))));
J_cmi_0{4}(4:6,3) = T_i_0{2}(1:3,3);
J_cmi_0{4}(1:3,4) = simplify(cross(T_i_0{3}(1:3,3),(T_i_0{10}(1:3,4)-T_i_0{3}(1:3,4))));
J_cmi_0{4}(4:6,4) = T_i_0{3}(1:3,3);

% jacobian of center of mass 5
J_cmi_0{5} = sym(zeros(6,6));
J_cmi_0{5}(1:3,1) = simplify(cross([0;0;1],T_i_0{11}(1:3,4)));
J_cmi_0{5}(4:6,1) = [0;0;1];
J_cmi_0{5}(1:3,2) = simplify(cross(T_i_0{1}(1:3,3),(T_i_0{11}(1:3,4)-T_i_0{1}(1:3,4))));
J_cmi_0{5}(4:6,2) = T_i_0{1}(1:3,3);
J_cmi_0{5}(1:3,3) = simplify(cross(T_i_0{2}(1:3,3),(T_i_0{11}(1:3,4)-T_i_0{2}(1:3,4))));
J_cmi_0{5}(4:6,3) = T_i_0{2}(1:3,3);
J_cmi_0{5}(1:3,4) = simplify(cross(T_i_0{3}(1:3,3),(T_i_0{11}(1:3,4)-T_i_0{3}(1:3,4))));
J_cmi_0{5}(4:6,4) = T_i_0{3}(1:3,3);
J_cmi_0{5}(1:3,5) = simplify(cross(T_i_0{4}(1:3,3),(T_i_0{11}(1:3,4)-T_i_0{4}(1:3,4))));
J_cmi_0{5}(4:6,5) = T_i_0{4}(1:3,3);

% jacobian of center of mass 6
J_cmi_0{6} = sym(zeros(6,6));
J_cmi_0{6}(1:3,1) = simplify(cross([0;0;1],T_i_0{12}(1:3,4)));
J_cmi_0{6}(4:6,1) = [0;0;1];
J_cmi_0{6}(1:3,2) = simplify(cross(T_i_0{1}(1:3,3),(T_i_0{12}(1:3,4)-T_i_0{1}(1:3,4))));
J_cmi_0{6}(4:6,2) = T_i_0{1}(1:3,3);
J_cmi_0{6}(1:3,3) = simplify(cross(T_i_0{2}(1:3,3),(T_i_0{12}(1:3,4)-T_i_0{2}(1:3,4))));
J_cmi_0{6}(4:6,3) = T_i_0{2}(1:3,3);
J_cmi_0{6}(1:3,4) = simplify(cross(T_i_0{3}(1:3,3),(T_i_0{12}(1:3,4)-T_i_0{3}(1:3,4))));
J_cmi_0{6}(4:6,4) = T_i_0{3}(1:3,3);
J_cmi_0{6}(1:3,5) = simplify(cross(T_i_0{4}(1:3,3),(T_i_0{12}(1:3,4)-T_i_0{4}(1:3,4))));
J_cmi_0{6}(4:6,5) = T_i_0{4}(1:3,3);
J_cmi_0{6}(1:3,6) = simplify(cross(T_i_0{5}(1:3,3),(T_i_0{12}(1:3,4)-T_i_0{5}(1:3,4))));
J_cmi_0{6}(4:6,6) = T_i_0{5}(1:3,3);

%% Intertia Matrices for centers of mass
I{1} = [I111 I112 I113;
        I112 I122 I123;
        I113 I123 I133];

I{2} = [I211 I212 I213;
        I212 I222 I223;
        I213 I223 I233];
  
I{3} = [I311 I312 I313;
        I312 I322 I323;
        I313 I323 I333];
  
I{4} = [I411 I412 I413;
        I412 I422 I423;
        I413 I423 I433];
  
I{5} = [I511 I512 I513;
        I512 I522 I523;
        I513 I523 I533];
    
I{6} = [I611 I612 I613;
        I612 I622 I623;
        I613 I623 I633];


%% inertia matrix M
% create cell arrays
Mm=[m1;m2;m3;m4;m5;m6];
J_cmi_0_v = {J_cmi_0{1}(1:3,1:end), J_cmi_0{2}(1:3,1:end), J_cmi_0{3}(1:3,1:end), ...
             J_cmi_0{4}(1:3,1:end), J_cmi_0{5}(1:3,1:end), J_cmi_0{6}(1:3,1:end)};
J_cmi_0_omega = {J_cmi_0{1}(4:6,1:end), J_cmi_0{2}(4:6,1:end), J_cmi_0{3}(4:6,1:end), ...
                 J_cmi_0{4}(4:6,1:end), J_cmi_0{5}(4:6,1:end), J_cmi_0{6}(4:6,1:end)};
R_cmi_0 = {T_i_0{7}(1:3,1:3), T_i_0{8}(1:3,1:3), T_i_0{9}(1:3,1:3), ...
           T_i_0{10}(1:3,1:3), T_i_0{11}(1:3,1:3), T_i_0{12}(1:3,1:3)};

% compute M
M = sym(zeros(6));
M_i = cell(1,6);
test_M_i = cell(1,6);
for i=1:6
    fprintf('computation of M_i{%d}, ',i);
    
    % Generate matrix for each center of mass
    M_i{i} = Mm(i)*(J_cmi_0_v{i}')*J_cmi_0_v{i} + (J_cmi_0_omega{i}')*R_cmi_0{i}*I{i}*(R_cmi_0{i}')*J_cmi_0_omega{i};
    test_M_i{i} = simplify(M_i{i}-M_i{i}');
    
    % Sum all inertia matrices
    M = M + M_i{i};   
end
clear i J_cmi_0_v J_cmi_0_omega R_cmi_0;
fprintf('\n');

% Simplification
% As the matrix is suddenly not symmetric anymore after simplification
% replace element M(6,5) -> Something goes wrong with the memory in that
% case
for i=1:6
    fprintf('simplification of M{%d,:} & M_{%d}, ',i,i);
    M(i,:) = simplify(M(i,:));
    M_i{i} = simplify(M_i{i});
end
fprintf('\n');
M(6,5) = M(5,6);

% test matrix
test_M = simplify(M-M')

%% matrix of Coriolis & Centripetal effects
% partial derivatives
dM_dqi{1} = diff(M,q1);
dM_dqi{2} = diff(M,q2);
dM_dqi{3} = diff(M,q3);
dM_dqi{4} = diff(M,q4);
dM_dqi{5} = diff(M,q5);
dM_dqi{6} = diff(M,q6);

% c matrix 
C = sym(zeros(6));
for k=1:6
    for j=1:6
        fprintf('computation of C(%d,%d), ',k,j);
        C(k,j) = 0.5*( (dM_dqi{1}(k,j)+dM_dqi{j}(k,1)-dM_dqi{k}(1,j))*pq1 ...
                   + (dM_dqi{2}(k,j)+dM_dqi{j}(k,2)-dM_dqi{k}(2,j))*pq2 ...  
                   + (dM_dqi{3}(k,j)+dM_dqi{j}(k,3)-dM_dqi{k}(3,j))*pq3 ...
                   + (dM_dqi{4}(k,j)+dM_dqi{j}(k,4)-dM_dqi{k}(4,j))*pq4 ...
                   + (dM_dqi{5}(k,j)+dM_dqi{j}(k,5)-dM_dqi{k}(5,j))*pq5 ...
                   + (dM_dqi{6}(k,j)+dM_dqi{j}(k,6)-dM_dqi{k}(6,j))*pq6);
    end
end
fprintf('\n');
clear k j;

% Do simplification for each matrix element, because memory might run full
% and the simplification will cause a bad result
sizeC = size(C);
for i=1:sizeC(1)
    for j=1:sizeC(2)
        fprintf('simplification of C(%d,%d), ',i,j);
        C(i,j) = simplify(C(i,j));
    end
end
fprintf('\n');
clear i j;

% test matrix
pM = dM_dqi{1}*pq1+dM_dqi{2}*pq2+dM_dqi{3}*pq3+dM_dqi{4}*pq4 ...
                +dM_dqi{5}*pq5+dM_dqi{6}*pq6;

N = pM-2*C;
test_N = simplify(N+N')
test_N_2 = simplify(Q*N*Q')

%% gravitational torques vector G
% IMPORTANT: Potential energy increases, if the robot goes up -> negative
%            sign for g, if multiplied with correct g vector
% mass 1
P_cm{1} = m1*g*[gx,gy,gz]*T_i_0{7}(1:3,4);

% mass 2
P_cm{2} = m2*g*[gx,gy,gz]*T_i_0{8}(1:3,4);

% mass 3
P_cm{3} = m3*g*[gx,gy,gz]*T_i_0{9}(1:3,4);

% mass 4
P_cm{4} = m4*g*[gx,gy,gz]*T_i_0{10}(1:3,4);

% mass 5
P_cm{5} = m5*g*[gx,gy,gz]*T_i_0{11}(1:3,4);

% mass 6
P_cm{6} = m6*g*[gx,gy,gz]*T_i_0{12}(1:3,4);

% overall
Pt = P_cm{1}+P_cm{2}+P_cm{3}+P_cm{4}+P_cm{5}+P_cm{6};

% g vector
G = [simplify(diff(Pt,q1));
     simplify(diff(Pt,q2));
     simplify(diff(Pt,q3));
     simplify(diff(Pt,q4));
     simplify(diff(Pt,q5));
     simplify(diff(Pt,q6));];
 
%% robot regressor (precomputation)
% robot regressor of center of mass i with index j
Theta_i_j = cell(6,3); % (j=1: Theta_i_2, j=2: Theta_i_3, j=3: Theta_i_4)
dK_dpq_i = cell(1,6);
dK_dq_i = cell(1,6);    
dP_dq_i = cell(1,6);

for i=1:6
    % compute theta
    fprintf('computation of Theta_i_j{%d,1:3}, ',i);
    Theta_i_j{i,1} = Mm(i)*[1; subs(relHt{i+6}(1:3,4),Q(i),0)]; %  Theta_i_2
    Theta_i_j{i,2} = [I{i}(1,1);I{i}(2,2);I{i}(3,3);I{i}(1,2);I{i}(1,3);I{i}(2,3)]; %  Theta_i_3
    Theta_i_j{i,3} = Mm(i)*[subs(relHt{i+6}(1:3,4),Q(i),0).*subs(relHt{i+6}(1:3,4),Q(i),0); ...
                            subs(relHt{i+6}(1,4),Q(i),0)*subs(relHt{i+6}(2,4),Q(i),0); ...
                            subs(relHt{i+6}(1,4),Q(i),0)*subs(relHt{i+6}(3,4),Q(i),0); ...
                            subs(relHt{i+6}(2,4),Q(i),0)*subs(relHt{i+6}(3,4),Q(i),0)]; %  Theta_i_4
    
    % compute K (kinetic energy) derivatives
%     fprintf('computation of dK_dpq_i{%d}, ',i);
%     dK_dpq_i{i} = expand(simplify(0.5*M_i{i}*pQr));
%     fprintf('computation of dK_dq_i{%d}, ',i);
%     dK_dq_i{i} = [0.5*pQ'*diff(M_i{i},q1)*pQr;
%                   0.5*pQ'*diff(M_i{i},q2)*pQr;
%                   0.5*pQ'*diff(M_i{i},q3)*pQr;
%                   0.5*pQ'*diff(M_i{i},q4)*pQr;
%                   0.5*pQ'*diff(M_i{i},q5)*pQr;
%                   0.5*pQ'*diff(M_i{i},q6)*pQr];
%     dK_dq_i{i} = expand(simplify(dK_dq_i{i}));
%     
%     % compute P (potential energy) derivative 
%     fprintf('computation of dP_dq_i{%d}\n',i);
%     dP_dq_i{i} = [diff(P_cm{i},q1); diff(P_cm{i},q2); diff(P_cm{i},q3);...
%                   diff(P_cm{i},q4); diff(P_cm{i},q5); diff(P_cm{i},q6)];
%     dP_dq_i{i} = expand(simplify(dP_dq_i{i}));
end

%% robot regressor (sorting out the correct values)
W_i_j = cell(6,2); % W_i_j={W_i_1,W_i_2};
pW_i_j = cell(6,2); % pW_i_j={pW_i_1,pW_i_2};
Y_i_j = cell(6,3); % Y_i_j={Y_i_1,Y_i_2,Y_i_3};

% dK_dpq_i{i} = [W_i_j{i,1}, W_i_j{i,2}]*[Theta_i_j{i,1};Theta_i_j{i,3};Theta_i_j{i,2}];


% pW_i_j{i,j} = diff(W_i_j{i,j},t)


% dK_dq_i{i} = -Y_i_j{i,1}*[Theta_i_j{i,1};Theta_i_j{i,3}]-Y_i_j{i,2}*Theta_i_j{i,2}


% dK_dq_i{i} = pQ*Y_i_j{i,3}*Theta_i_j{i,1}


% compute next values from derived equations
Y_i_1_hat = cell(1,6);
Y_i = cell(1,6);
Theta_i = cell(1,6);
for i=1:6
    Y_i_1_hat{i} = Y_i_j{i,1}+[Y_i_j{i,3},zeros(1,6)];
    
    Y_i{i} = [pW_i_j{i,1}+Y_i_1_hat{i}, pW_i_j{i,1}+Y_i_j{i,2}];
    Theta_i{i} = [Theta_i_j{i,1};Theta_i_j{i,3};Theta_i_j{i,2}];
end

% get final Y & Theta
Yr = [Y_i{1},Y_i{2},Y_i{3},Y_i{4},Y_i{5},Y_i{6}];
Theta = [Theta_i{1};Theta_i{2};Theta_i{3};Theta_i{4};Theta_i{5};Theta_i{6}];

% test robot regressor
fprintf('testing of robot regressor\n');
reg_test = M*ppQr+C*pQr+G - Yr*Theta;
reg_test = simplify(reg_test)

 
%% Trajectory Planning based on Jacobian
% Matrix of 5th degree polynomial 
T = [1 0                0                   0                       0                       0;
     1 (t_final-t_init) (t_final-t_init)^2  (t_final-t_init)^3      (t_final-t_init)^4      (t_final-t_init)^5;
     0 1                0                   0                       0                       0;
     0 1                2*(t_final-t_init)  3*(t_final-t_init)^2    4*(t_final-t_init)^3    5*(t_final-t_init)^4;
     0 0                2                   0                       0                       0;
     0 0                2                   6*(t_final-t_init)      12*(t_final-t_init)^2   20*(t_final-t_init)^3;];
 
% Solution vector for linear system equation
x = [p_init; p_final; pp_init; pp_final; ppp_init; ppp_final];
 
% Solve system of linear equations
a_x = simplify(T\x);

%% File Creation 
% Relative transforms for each joint
fid = fopen('rel_T_i_UR10.m','w');
fprintf(fid,'function [T_1_0,T_2_1,T_3_2,T_4_3,T_5_4,T_6_5] = rel_T_i_UR10(u)\n\n');
fprintf(fid,'%% This file was generated automatically by "symModel_UR10".\n\n');
fprintf(fid,'%%%% parameters\n');
fprintf(fid,'%%Joint Position\n');
fprintf(fid,'q1=u(1);\n');
fprintf(fid,'q2=u(2);\n');
fprintf(fid,'q3=u(3);\n');
fprintf(fid,'q4=u(4);\n');
fprintf(fid,'q5=u(5);\n');
fprintf(fid,'q6=u(6);\n');
fprintf(fid,'Q=[q1;q2;q3;q4;q5;q6];\n\n');
fprintf(fid,'%%Kinematic Parameters\n');
fprintf(fid,'L1=u(7);\n');
fprintf(fid,'L2=u(8);\n');
fprintf(fid,'L3=u(9);\n');
fprintf(fid,'L4=u(10);\n');
fprintf(fid,'L5=u(11);\n');
fprintf(fid,'L6=u(12);\n');
fprintf(fid,'L7=u(13);\n');
fprintf(fid,'L8=u(14);\n');
fprintf(fid,'L9=u(15);\n');
fprintf(fid,'L10=u(16);\n');
fprintf(fid,'L11=u(17);\n');
fprintf(fid,'L12=u(18);\n');
fprintf(fid,'L13=u(19);\n');
fprintf(fid,'L14=u(20);\n\n');
for i=1:4
    for j=1:4
        fprintf(fid,'T_1_0(%d,%d)=%s;\n',i,j,char(relHt{1}(i,j)));
    end
end
fprintf(fid,'\n');
for i=1:4
    for j=1:4
        fprintf(fid,'T_2_1(%d,%d)=%s;\n',i,j,char(relHt{2}(i,j)));
    end
end
fprintf(fid,'\n');
for i=1:4
    for j=1:4
        fprintf(fid,'T_3_2(%d,%d)=%s;\n',i,j,char(relHt{3}(i,j)));
    end
end
fprintf(fid,'\n');
for i=1:4
    for j=1:4
        fprintf(fid,'T_4_3(%d,%d)=%s;\n',i,j,char(relHt{4}(i,j)));
    end
end
fprintf(fid,'\n');
for i=1:4
    for j=1:4
        fprintf(fid,'T_5_4(%d,%d)=%s;\n',i,j,char(relHt{5}(i,j)));
    end
end
fprintf(fid,'\n');
for i=1:4
    for j=1:4
        fprintf(fid,'T_6_5(%d,%d)=%s;\n',i,j,char(relHt{6}(i,j)));
    end
end
fprintf(fid,'\n');
fprintf(fid,'end \n');
fclose(fid);

% Relative homogeneous transforms for centers of mass
fid_2 = fopen('rel_T_cmi_UR10.m','w');
fprintf(fid_2,'function [T_cm1_0,T_cm2_1,T_cm3_2,T_cm4_3,T_cm5_4,T_cm6_5] = rel_T_cmi_UR10(u)\n\n');
fprintf(fid_2,'%% This file was generated automatically by "symModel_UR10".\n\n');
fprintf(fid_2,'%%%% parameters\n');
fprintf(fid_2,'%%Joint Position\n');
fprintf(fid_2,'q1=u(1);\n');
fprintf(fid_2,'q2=u(2);\n');
fprintf(fid_2,'q3=u(3);\n');
fprintf(fid_2,'q4=u(4);\n');
fprintf(fid_2,'q5=u(5);\n');
fprintf(fid_2,'q6=u(6);\n');
fprintf(fid_2,'Q=[q1;q2;q3;q4;q5;q6];\n\n');
fprintf(fid_2,'%%Kinematic Parameters\n');
fprintf(fid_2,'L1=u(7);\n');
fprintf(fid_2,'L2=u(8);\n');
fprintf(fid_2,'L3=u(9);\n');
fprintf(fid_2,'L4=u(10);\n');
fprintf(fid_2,'L5=u(11);\n');
fprintf(fid_2,'L6=u(12);\n');
fprintf(fid_2,'L7=u(13);\n');
fprintf(fid_2,'L8=u(14);\n');
fprintf(fid_2,'L9=u(15);\n');
fprintf(fid_2,'L10=u(16);\n');
fprintf(fid_2,'L11=u(17);\n');
fprintf(fid_2,'L12=u(18);\n');
fprintf(fid_2,'L13=u(19);\n');
fprintf(fid_2,'L14=u(20);\n\n');
for i=1:4
    for j=1:4
        fprintf(fid_2,'T_cm1_0(%d,%d)=%s;\n',i,j,char(relHt{7}(i,j)));
    end
end
fprintf(fid_2,'\n');
for i=1:4
    for j=1:4
        fprintf(fid_2,'T_cm2_1(%d,%d)=%s;\n',i,j,char(relHt{8}(i,j)));
    end
end
fprintf(fid_2,'\n');
for i=1:4
    for j=1:4
        fprintf(fid_2,'T_cm3_2(%d,%d)=%s;\n',i,j,char(relHt{9}(i,j)));
    end
end
fprintf(fid_2,'\n');
for i=1:4
    for j=1:4
        fprintf(fid_2,'T_cm4_3(%d,%d)=%s;\n',i,j,char(relHt{10}(i,j)));
    end
end
fprintf(fid_2,'\n');
for i=1:4
    for j=1:4
        fprintf(fid_2,'T_cm5_4(%d,%d)=%s;\n',i,j,char(relHt{11}(i,j)));
    end
end
fprintf(fid_2,'\n');
for i=1:4
    for j=1:4
        fprintf(fid_2,'T_cm6_5(%d,%d)=%s;\n',i,j,char(relHt{12}(i,j)));
    end
end
fprintf(fid_2,'\n');
fprintf(fid_2,'end \n');
fclose(fid_2);

% Jacobian matrix of end-effector
fid_4 = fopen('diff_FK_UR10.m','w');
fprintf(fid_4,'function [XOut] = diff_FK_UR10(u)\n\n');
fprintf(fid_4,'%% This file was generated automatically by "symModel_UR10".\n\n');
fprintf(fid_4,'%%%% parameters\n');
fprintf(fid_4,'%%Joint Position\n');
fprintf(fid_4,'q1=u(1);\n');
fprintf(fid_4,'q2=u(2);\n');
fprintf(fid_4,'q3=u(3);\n');
fprintf(fid_4,'q4=u(4);\n');
fprintf(fid_4,'q5=u(5);\n');
fprintf(fid_4,'q6=u(6);\n');
fprintf(fid_4,'Q=[q1;q2;q3;q4;q5;q6];\n\n');
fprintf(fid_4,'%%Kinematic Parameters\n');
fprintf(fid_4,'L1=u(7);\n');
fprintf(fid_4,'L2=u(8);\n');
fprintf(fid_4,'L3=u(9);\n');
fprintf(fid_4,'L4=u(10);\n');
fprintf(fid_4,'L5=u(11);\n');
fprintf(fid_4,'L6=u(12);\n');
fprintf(fid_4,'L7=u(13);\n');
fprintf(fid_4,'L8=u(14);\n');
fprintf(fid_4,'L9=u(15);\n');
fprintf(fid_4,'L10=u(16);\n');
fprintf(fid_4,'L11=u(17);\n');
fprintf(fid_4,'L12=u(18);\n');
fprintf(fid_4,'L13=u(19);\n');
fprintf(fid_4,'L14=u(20);\n\n');
fprintf(fid_4,'%%Jacobian\n');
for i=1:6
    for j=1:6
        fprintf(fid_4,'J_6_0(%d,%d)=%s;\n',i,j,char(J_ef_0(i,j)));
    end
end
fprintf(fid_4,'\n');
fprintf(fid_4,'%%Derivative of jacobian\n');
for i=1:6
    for j=1:6
        fprintf(fid_4,'pJ_6_0(%d,%d)=%s;\n',i,j,char(pJ_ef_0(i,j)));
    end
end
fprintf(fid_4,'\n');
fprintf(fid_4,'%%Output\n');
fprintf(fid_4,'XOut=[J_6_0,pJ_6_0];\n');
fprintf(fid_4,'end \n');
fclose(fid_4);

% Dynamic model
fid_5 = fopen('dynamics_UR10.m','w');
fprintf(fid_5,'function [ppQ] = dynamics_UR10(u)\n\n');
fprintf(fid_5,'%% This file was generated automatically by "symModel_UR10".\n\n');
fprintf(fid_5,'%%%% parameters\n');
fprintf(fid_5,'%%Joint Position\n');
fprintf(fid_5,'q1=u(1);\n');
fprintf(fid_5,'q2=u(2);\n');
fprintf(fid_5,'q3=u(3);\n');
fprintf(fid_5,'q4=u(4);\n');
fprintf(fid_5,'q5=u(5);\n');
fprintf(fid_5,'q6=u(6);\n');
fprintf(fid_5,'Q=[q1;q2;q3;q4;q5;q6];\n\n');
fprintf(fid_5,'%%Joint Velocity\n');
fprintf(fid_5,'pq1=u(7);\n');
fprintf(fid_5,'pq2=u(8);\n');
fprintf(fid_5,'pq3=u(9);\n');
fprintf(fid_5,'pq4=u(10);\n');
fprintf(fid_5,'pq5=u(11);\n');
fprintf(fid_5,'pq6=u(12);\n');
fprintf(fid_5,'pQ=[pq1;pq2;pq3;pq4;pq5;pq6];\n\n');
fprintf(fid_5,'%%Kinematic Parameters\n');
fprintf(fid_5,'L1=u(13);\n');
fprintf(fid_5,'L2=u(14);\n');
fprintf(fid_5,'L3=u(15);\n');
fprintf(fid_5,'L4=u(16);\n');
fprintf(fid_5,'L5=u(17);\n');
fprintf(fid_5,'L6=u(18);\n');
fprintf(fid_5,'L7=u(19);\n');
fprintf(fid_5,'L8=u(20);\n');
fprintf(fid_5,'L9=u(21);\n');
fprintf(fid_5,'L10=u(22);\n');
fprintf(fid_5,'L11=u(23);\n');
fprintf(fid_5,'L12=u(24);\n');
fprintf(fid_5,'L13=u(25);\n');
fprintf(fid_5,'L14=u(26);\n\n');
fprintf(fid_5,'%%Dynamic Parameters\n');
fprintf(fid_5,'m1=u(27);\n');
fprintf(fid_5,'m2=u(28);\n');
fprintf(fid_5,'m3=u(29);\n');
fprintf(fid_5,'m4=u(30);\n');
fprintf(fid_5,'m5=u(31);\n');
fprintf(fid_5,'m6=u(32);\n\n');
fprintf(fid_5,'%%Inertia Tensors\n');
fprintf(fid_5,'I111=u(33);\n');
fprintf(fid_5,'I112=u(34);\n');
fprintf(fid_5,'I113=u(35);\n');
fprintf(fid_5,'I122=u(36);\n');
fprintf(fid_5,'I123=u(37);\n');
fprintf(fid_5,'I133=u(38);\n\n');
fprintf(fid_5,'I211=u(39);\n');
fprintf(fid_5,'I212=u(40);\n');
fprintf(fid_5,'I213=u(41);\n');
fprintf(fid_5,'I222=u(42);\n');
fprintf(fid_5,'I223=u(43);\n');
fprintf(fid_5,'I233=u(44);\n\n');
fprintf(fid_5,'I311=u(45);\n');
fprintf(fid_5,'I312=u(46);\n');
fprintf(fid_5,'I313=u(47);\n');
fprintf(fid_5,'I322=u(48);\n');
fprintf(fid_5,'I323=u(49);\n');
fprintf(fid_5,'I333=u(50);\n\n');
fprintf(fid_5,'I411=u(51);\n');
fprintf(fid_5,'I412=u(52);\n');
fprintf(fid_5,'I413=u(53);\n');
fprintf(fid_5,'I422=u(54);\n');
fprintf(fid_5,'I423=u(55);\n');
fprintf(fid_5,'I433=u(56);\n\n');
fprintf(fid_5,'I511=u(57);\n');
fprintf(fid_5,'I512=u(58);\n');
fprintf(fid_5,'I513=u(59);\n');
fprintf(fid_5,'I522=u(60);\n');
fprintf(fid_5,'I523=u(61);\n');
fprintf(fid_5,'I533=u(62);\n\n');
fprintf(fid_5,'I611=u(63);\n');
fprintf(fid_5,'I612=u(63);\n');
fprintf(fid_5,'I613=u(64);\n');
fprintf(fid_5,'I622=u(65);\n');
fprintf(fid_5,'I623=u(66);\n');
fprintf(fid_5,'I633=u(67);\n\n');
fprintf(fid_5,'%%Gravity (magnitude of gravitation)\n');
fprintf(fid_5,'g=u(68);\n\n');
fprintf(fid_5,'%%Time\n');
fprintf(fid_5,'t=u(69);\n\n');
fprintf(fid_5,'%%Viscous Friction Matrix\n');
fprintf(fid_5,'Beta(1,1)=u(70);\n');
fprintf(fid_5,'Beta(2,2)=u(71);\n');
fprintf(fid_5,'Beta(3,3)=u(72);\n');
fprintf(fid_5,'Beta(4,4)=u(73);\n');
fprintf(fid_5,'Beta(5,5)=u(74);\n');
fprintf(fid_5,'Beta(6,6)=u(75);\n\n');
fprintf(fid_5,'%%Gravity Vector (direction of gravity wrt world frame)\n');
fprintf(fid_5,'gx=u(75);\n');
fprintf(fid_5,'gy=u(76);\n');
fprintf(fid_5,'gz=u(77);\n\n');
fprintf(fid_5,'%% external forces (joint efforts)\n');
fprintf(fid_5,'Tao=[u(78);u(79);u(80);u(81);u(82);u(83)];\n\n');
fprintf(fid_5,'%% external forces damped\n');
fprintf(fid_5,'Tao_d = Tao-Beta*pQ;\n\n');
fprintf(fid_5,'%%%% dynamics matrices\n');
fprintf(fid_5,'%% inertia matrix\n');
for i=1:6
    for j=1:6
        fprintf(fid_5,'M(%d,%d)=%s;\n',i,j,char(M(i,j)));
    end
end
fprintf(fid_5,'\n');
fprintf(fid_5,'%% coriolis & centripetal effects matrix\n');
for i=1:6
    for j=1:6
        fprintf(fid_5,'C(%d,%d)=%s;\n',i,j,char(C(i,j)));
    end
end
fprintf(fid_5,'\n');
fprintf(fid_5,'%% gravitational effects matrix\n');
for i=1:6
    fprintf(fid_5,'G(%d,1)=%s;\n',i,char(G(i,1)));
end
fprintf(fid_5,'\n');
fprintf(fid_5,'%%%% compute joint accelerations\n');
fprintf(fid_5,'%% external forces (joint efforts)\n');
fprintf(fid_5,'Tao=[u(46);u(47);u(48)];\n\n');
fprintf(fid_5,'%% joint accelerations\n');
fprintf(fid_5,'ppQ=M\\(Tao_d-C*pQ-G);\n\n');
fprintf(fid_5,'end \n');
fclose(fid_5);

% Kinematics & diff. kinematics for robot
fid_6 = fopen('Forward_Diff_Kinematics_UR10.m','w');
fprintf(fid_6,'function [XOut] = Forward_Diff_Kinematics_UR10(u)\n\n');
fprintf(fid_6,'%% This file was generated automatically by "symModel_UR10".\n\n');
fprintf(fid_6,'%%%% parameters\n');
fprintf(fid_6,'%%Joint Position\n');
fprintf(fid_6,'q1=u(1);\n');
fprintf(fid_6,'q2=u(2);\n');
fprintf(fid_6,'q3=u(3);\n');
fprintf(fid_6,'q4=u(4);\n');
fprintf(fid_6,'q5=u(5);\n');
fprintf(fid_6,'q6=u(6);\n');
fprintf(fid_6,'Q=[q1;q2;q3;q4;q5;q6];\n\n');
fprintf(fid_6,'%%Joint Velocity\n');
fprintf(fid_6,'pq1=u(7);\n');
fprintf(fid_6,'pq2=u(8);\n');
fprintf(fid_6,'pq3=u(9);\n');
fprintf(fid_6,'pq4=u(10);\n');
fprintf(fid_6,'pq5=u(11);\n');
fprintf(fid_6,'pq6=u(12);\n');
fprintf(fid_6,'pQ=[pq1;pq2;pq3;pq4;pq5;pq6];\n\n');
fprintf(fid_6,'%%Joint Acceleration\n');
fprintf(fid_6,'ppq1=u(13);\n');
fprintf(fid_6,'ppq2=u(14);\n');
fprintf(fid_6,'ppq3=u(15);\n');
fprintf(fid_6,'ppq4=u(16);\n');
fprintf(fid_6,'ppq5=u(17);\n');
fprintf(fid_6,'ppq6=u(18);\n');
fprintf(fid_6,'ppQ=[ppq1;ppq2;ppq3;ppq4;ppq5;ppq6];\n\n');
fprintf(fid_6,'%%Kinematic Parameters\n');
fprintf(fid_6,'L1=u(19);\n');
fprintf(fid_6,'L2=u(20);\n');
fprintf(fid_6,'L3=u(21);\n');
fprintf(fid_6,'L4=u(22);\n');
fprintf(fid_6,'L5=u(23);\n');
fprintf(fid_6,'L6=u(24);\n');
fprintf(fid_6,'L7=u(25);\n');
fprintf(fid_6,'L8=u(26);\n');
fprintf(fid_6,'L9=u(27);\n');
fprintf(fid_6,'L10=u(28);\n');
fprintf(fid_6,'L11=u(29);\n');
fprintf(fid_6,'L12=u(30);\n');
fprintf(fid_6,'L13=u(31);\n');
fprintf(fid_6,'L14=u(32);\n\n');
fprintf(fid_6,'%%End-effector position (forward kinematics)\n');
for i=1:6
	fprintf(fid_6,'X_ef_0(%d,1)=%s;\n',i,char(X_ef_0(i,1)));
end
fprintf(fid_6,'\n');
fprintf(fid_6,'%%End-effector velocity (differential kinematics)\n');
for i=1:6
	fprintf(fid_6,'pX_ef_0(%d,1)=%s;\n',i,char(pX_ef_0(i,1)));
end
fprintf(fid_6,'\n');
fprintf(fid_6,'%%End-effector acceleration\n');
for i=1:6
	fprintf(fid_6,'ppX_ef_0(%d,1)=%s;\n',i,char(ppX_ef_0(i,1)));
end
fprintf(fid_6,'\n');
fprintf(fid_6,'%%Output\n');
fprintf(fid_6,'XOut=[X_ef_0,pX_ef_0,ppX_ef_0];\n');
fprintf(fid_6,'end \n');
fclose(fid_6);

%% matrices for robot regressor
fid_8 = fopen('robRegMatrices_ur10.m','w');
fprintf(fid_8,'%%%% robRegMatrices_ur10.m\n\n');
fprintf(fid_8,'%% This file was generated automatically by "symModel_UR10".\n');
fprintf(fid_8,'%% It contains the robot regressor matrices of the UR10 robot.\n\n');
fprintf(fid_8,'%% Yr-matrix\n');
for i=1:6
    for j=1:length(Theta)
        fprintf(fid_8,'Yr(%d,%d)=%s;\n',i,j,char(Yr(i,j)));
    end
end
fprintf(fid_8,'\n');
fprintf(fid_8,'%% robot regressor Theta\n');
for i=1:length(Theta)
        fprintf(fid_8,'Theta(%d,1)=%s;\n',i,char(Theta(i,1)));
end
fprintf(fid_8,'\n');


%% Create trajectory according to 5th degree polynomial
fid_7 = fopen('createEvalPTPTraj.m','w');
fprintf(fid_7,'function [Out] = createEvalPTPTraj(t,t_init,t_final,P_init,P_final,pP_init,pP_final,ppP_init,ppP_final)\n\n');
fprintf(fid_7,'%% This file was generated automatically by "symModel_UR10".\n\n');
fprintf(fid_7,'for i=1:length(P_init)\n');
fprintf(fid_7,'  p_init=P_init(i,1);\n');
fprintf(fid_7,'  p_final=P_final(i,1);\n');
fprintf(fid_7,'  pp_init=pP_init(i,1);\n');
fprintf(fid_7,'  pp_final=pP_final(i,1);\n');
fprintf(fid_7,'  ppp_init=ppP_init(i,1);\n');
fprintf(fid_7,'  ppp_final=ppP_final(i,1);\n\n');
for i=1:length(a_x)
    fprintf(fid_7,'  a(%d,1) = %s;\n',i,char(a_x(i,1)));
end
fprintf(fid_7,'\n');
fprintf(fid_7,'  p_d_w{i}=a(1,1)+a(2,1)*(t-t_init)+a(3,1)*(t-t_init)^2+a(4,1)*(t-t_init)^3+a(5,1)*(t-t_init)^4+a(6,1)*(t-t_init)^5;\n');
fprintf(fid_7,'  pp_d_w{i}=a(2,1)+2*a(3,1)*(t-t_init)+3*a(4,1)*(t-t_init)^2+4*a(5,1)*(t-t_init)^3+5*a(6,1)*(t-t_init)^4;\n');
fprintf(fid_7,'  ppp_d_w{i}=2*a(3,1)+6*a(4,1)*(t-t_init)+12*a(5,1)*(t-t_init)+20*a(6,1)*(t-t_init)^3;\n');
fprintf(fid_7,'end\n\n');
fprintf(fid_7,'Out = [p_d_w{1};p_d_w{2};p_d_w{3};pp_d_w{1};pp_d_w{2};pp_d_w{3};ppp_d_w{1};ppp_d_w{2};ppp_d_w{3}];\n');
fprintf(fid_7,'end \n');
fclose(fid_7);
end

